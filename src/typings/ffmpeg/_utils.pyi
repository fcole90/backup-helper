from types import NotImplementedType
from typing import Any, Type
from .__helper_types import CLIValue

class BaseBaseString(Type[str]):
    def __instancecheck__(cls, instance: object) -> bool: ...
    @classmethod
    def __subclasshook__(cls, thing: type) -> bool | NotImplementedType: ...

# We lose specificity, but that's as close as we can go in type stubs as of Python 3.13
def with_metaclass(meta: Type[Any], *bases: Type[Any]) -> Type[Any]: ...

# Keeps compatibility with Python 2 in the original implementation, these stubs
# only support Python 3, so we can take shortcuts
class basestring(BaseBaseString): ...

def get_hash(item: object) -> str: ...
def get_hash_int(item: object) -> int: ...
def escape_chars(text: str, chars: str) -> str:
    """Helper function to escape uncomfortable characters."""
    ...

def convert_kwargs_to_cmd_line_args(kwargs: dict[str, CLIValue]) -> list[str]:
    """Helper function to build command line arguments out of dict."""
    ...
